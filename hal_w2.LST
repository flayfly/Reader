C51 COMPILER V9.52.0.0   HAL_W2                                                            02/26/2016 11:44:41 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE HAL_W2
OBJECT MODULE PLACED IN hal_w2.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE hal_w2.c BROWSE INCDIR(C:\Nordic Semiconductor\nRFgo SDK 2.3.0.10040\source
                    -_code\compiler\c51;C:\Nordic Semiconductor\nRFgo SDK 2.3.0.10040\source_code\hal\nrf24le1;C:\Nordic Semiconductor\nRFgo 
                    -SDK 2.3.0.10040\source_code\compiler\common) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic 
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *              
  11           * $LastChangedRevision: 2503 $
  12           */
  13          
  14          /** @file
  15           * @brief Implementation of hal_w2
  16           */
  17          
  18          #include <stdint.h>
  19          #include <stdbool.h>
  20          
  21          #include "nrf24le1.h"
  22          #include "nordic_common.h"
  23          #include "hal_w2.h"
  24          #include "hal_delay.h"
  25          
  26          #define BROADCAST_ENABLE      7     // W2CON0 register bit 7
  27          #define CLOCK_STOP            6     // W2CON0 register bit 6
  28          #define X_STOP                5     // W2CON0 register bit 5
  29          #define X_START               4     // W2CON0 register bit 4
  30          #define CLOCK_FREQUENCY_1     3     // W2CON0 register bit 3
  31          #define CLOCK_FREQUENCY_0     2     // W2CON0 register bit 2
  32          #define MASTER_SELECT         1     // W2CON0 register bit 1
  33          #define WIRE_2_ENABLE         0     // W2CON0 register bit 0
  34          
  35          void hal_w2_soft_reset();
  36          
  37          /* Slave specific functions */
  38          
  39          void hal_w2_respond_to_gen_adr(bool resp_gen)
  40          { 
  41   1        if(resp_gen)
  42   1        {                                                                   
  43   2          W2CON0 = W2CON0 | (1 << BROADCAST_ENABLE);  // Set "broadcastEnable" bit
  44   2        }
  45   1        else
  46   1        {
  47   2          W2CON0 = W2CON0 & ~(1 << BROADCAST_ENABLE); // Clear "broadcastEnable" bit
  48   2        }
  49   1      }
  50          
  51          void hal_w2_alter_clock(bool alt_clk)
  52          {
  53   1        if(alt_clk)                         
C51 COMPILER V9.52.0.0   HAL_W2                                                            02/26/2016 11:44:41 PAGE 2   

  54   1        {
  55   2          W2CON0 = W2CON0 | (1 << CLOCK_STOP);      // Set "clockStop" bit
  56   2        }
  57   1        else
  58   1        {
  59   2          W2CON0 = W2CON0 & ~(1 << CLOCK_STOP);     // Clear "clockStop" bit
  60   2        }
  61   1      }
  62          
  63          void hal_w2_irq_stop_cond_enable(bool stop_cond)
  64          { 
  65   1        if(stop_cond)
  66   1        {                                                                  
  67   2          W2CON0 = W2CON0 & ~(1 << X_STOP);         // Clear "xStop" bit
  68   2        }
  69   1        else
  70   1        {
  71   2          W2CON0 = W2CON0 | (1 << X_STOP);          // Set "xStop" bit
  72   2        }
  73   1      }
  74          
  75          void hal_w2_irq_adr_match_enable(bool addr_match)
  76          {
  77   1        if(addr_match)
  78   1        {
  79   2          W2CON0 = W2CON0 & ~(1 << X_START);        // Clear "xStart" bit
  80   2        }
  81   1        else
  82   1        {
  83   2          W2CON0 = W2CON0 | (1 << X_START);         // Set "xStart" bit
  84   2        }
  85   1      }
  86          
  87          void hal_w2_set_slave_address(uint8_t address)
  88          {
  89   1        W2SADR = (address & 0x7F);                  // Set 7 bit adress of the slave
  90   1      }
  91          
  92          /* General functions */
  93          
  94          void hal_w2_set_clk_freq(hal_w2_clk_freq_t freq)
  95          {                                             
  96   1        W2CON0 = (W2CON0 & 0xF3) | (((uint8_t)freq) << CLOCK_FREQUENCY_0);       
  97   1      }                                             // Update "clockFrequency" bits
  98          
  99          void hal_w2_set_op_mode(hal_w2_op_mode_t mode)
 100          {
 101   1        if(mode == HAL_W2_MASTER)                   // Check for master mode
 102   1        {                                                                  
 103   2          W2CON0 = W2CON0 | (1 << MASTER_SELECT);   // Set "masterSelect" bit
 104   2        }
 105   1        else
 106   1        {
 107   2          W2CON0 = W2CON0 & ~(1 << MASTER_SELECT);  // Clear "masterSelect" bit
 108   2        }
 109   1      }
 110          
 111          void hal_w2_enable(bool en)
 112          { 
 113   1        if(en)
 114   1        {
 115   2          W2CON0 = W2CON0 | (1 << WIRE_2_ENABLE);   // Set "wire2Enable" bit
C51 COMPILER V9.52.0.0   HAL_W2                                                            02/26/2016 11:44:41 PAGE 3   

 116   2        }
 117   1        else
 118   1        {
 119   2          W2CON0 = W2CON0 & ~(1 << WIRE_2_ENABLE);  // Clear "wire2Enable" bit
 120   2        }
 121   1      }
 122          
 123          void hal_w2_all_irq_enable(bool irq)
 124          { /* In this function the standard "read-modify-write" is not used because
 125   1           bit 4:0 (the status bits) in W2CON1 are cleared when read. These bits
 126   1           are read only so they can not be modified. */
 127   1        if(irq)
 128   1        {
 129   2          W2CON1 = ~(BIT_5);                        // Clear "maskIrq" bit
 130   2        }
 131   1        else
 132   1        {
 133   2          W2CON1 = BIT_5;                           // Set "maskIrq" bit
 134   2        }
 135   1      }
 136          
 137          void hal_w2_configure_master(hal_w2_clk_freq_t mode)
 138          {
 139   1        hal_w2_enable(true);
 140   1        hal_w2_set_clk_freq(mode);
 141   1        hal_w2_set_op_mode(HAL_W2_MASTER);
 142   1      
 143   1        INTEXP |= 0x04;
 144   1      //
 145   1        IEN1 |= 0x04;   // Enable 2 wire interrupts
 146   1        W2CON1 = 0x00;
 147   1        hal_w2_all_irq_enable(true);             // Enable interrupts in the 2-wire  
 148   1        SPIF = 0;
 149   1      }
 150          
 151          uint8_t hal_w2_wait_data_ready(void)
 152          {
 153   1        uint32_t timeout_counter = 0x0FF;
 154   1        uint8_t w2_status;
 155   1        bool data_ready;
 156   1        bool nack_received;
 157   1      
 158   1        do
 159   1        {
 160   2          w2_status = W2CON1;
 161   2          data_ready = (w2_status & W2CON1_FLAG_DATA_READY);
 162   2          nack_received = (w2_status & W2CON1_FLAG_NACK);
 163   2          delay_us(10);
 164   2        } while (!data_ready);
 165   1      
 166   1      
 167   1        return w2_status;
 168   1      }
 169          
 170          bool hal_w2_init_transfer(uint8_t address, hal_w2_direction_t direction)
 171          {
 172   1        uint8_t w2_status;
 173   1      
 174   1        HAL_W2_ISSUE_START_COND;
 175   1        HAL_W2_WRITE((address << 1) | (uint8_t)direction);
 176   1      
 177   1        w2_status = hal_w2_wait_data_ready();
C51 COMPILER V9.52.0.0   HAL_W2                                                            02/26/2016 11:44:41 PAGE 4   

 178   1      
 179   1        if (w2_status & W2CON1_FLAG_NACK)
 180   1        {
 181   2          return false; // NACK received from slave or timeout
 182   2        }
 183   1        else
 184   1        {
 185   2          return true; // ACK received from slave
 186   2        }
 187   1      }
 188          
 189          bool hal_w2_write(uint8_t address, const uint8_t *data_ptr, uint8_t data_len)
 190          {
 191   1        bool ack_received;
 192   1        ack_received = hal_w2_init_transfer(address, HAL_W2_DIR_WRITE);
 193   1      
 194   1        while (data_len-- > 0 && ack_received == true)
 195   1        {
 196   2          uint8_t w2_status;
 197   2          HAL_W2_WRITE(*data_ptr++);
 198   2          w2_status = hal_w2_wait_data_ready();
 199   2          if (w2_status & W2CON1_FLAG_NACK)  
 200   2            {
 201   3            ack_received = false;
 202   3          }
 203   2        }
 204   1      
 205   1        HAL_W2_ISSUE_STOP_COND;
 206   1      
 207   1        return ack_received;
 208   1      }
 209          
 210          bool hal_w2_read(uint8_t address, uint8_t *data_ptr, uint8_t data_len)
 211          {
 212   1        uint8_t w2_status;
 213   1        bool ack_received;
 214   1        
 215   1        ack_received = hal_w2_init_transfer(address, HAL_W2_DIR_READ);
 216   1      
 217   1        if (ack_received == false) 
 218   1        {
 219   2          // This situation (NACK received on bus while trying to read from a slave) leads to a deadlock in the 
             -2-wire interface. 
 220   2          hal_w2_soft_reset(); // Workaround for the deadlock
 221   2        }
 222   1      
 223   1      
 224   1        while (data_len-- && ack_received)
 225   1        {
 226   2          if (data_len == 0)
 227   2          {
 228   3            HAL_W2_ISSUE_STOP_COND;
 229   3          }
 230   2      
 231   2          w2_status = hal_w2_wait_data_ready();
 232   2      
 233   2          *data_ptr++ = HAL_W2_READ();
 234   2          ack_received = !(w2_status & W2CON1_FLAG_NACK);
 235   2        }
 236   1      
 237   1        return ack_received;  
 238   1      }
C51 COMPILER V9.52.0.0   HAL_W2                                                            02/26/2016 11:44:41 PAGE 5   

 239          
 240          void hal_w2_soft_reset()
 241          {
 242   1      #ifndef W2_SOFT_RESET_NOT_AVAILABLE
 243   1        uint8_t pulsecount, w2_freq;
 244   1      
 245   1        // Store the selected 2-wire frequency 
 246   1        w2_freq = W2CON0 & 0x0C;
 247   1        // Prepare the GPIO's to take over SDA & SCL
 248   1        HAL_W2_CLEAR_SDA_SCL;
 249   1        HAL_W2_OVERRIDE_SDA_SCL(1, 1);
 250   1        //P0DIR = 0xFF;
 251   1        
 252   1        // Reset 2-wire. SCL goes high.
 253   1        W2CON0 = 0x03;
 254   1        W2CON0 = 0x07;
 255   1        
 256   1        // Disable 2-wire.
 257   1        W2CON0 = 0x06;
 258   1        
 259   1        // SDA and SCL are now under software control, and both are high. 
 260   1        // Complete first SCL pulse.
 261   1        //P0DIR = 0xEF;
 262   1        HAL_W2_OVERRIDE_SDA_SCL(1, 0);
 263   1        
 264   1        // SCL low
 265   1        delay_us(5);
 266   1        //P0DIR = 0xCF;
 267   1        HAL_W2_OVERRIDE_SDA_SCL(0, 0);
 268   1        
 269   1        // SDA low
 270   1        // Create SCL pulses for 7 more data bits and ACK/NACK
 271   1        delay_us(5);
 272   1        for( pulsecount = 0; pulsecount < 8; pulsecount++ )
 273   1        {
 274   2          //P0DIR = 0xDF;
 275   2          HAL_W2_OVERRIDE_SDA_SCL(0, 1);
 276   2          delay_us(5);
 277   2          //P0DIR = 0xCF;
 278   2          HAL_W2_OVERRIDE_SDA_SCL(0, 0);
 279   2          delay_us(5);
 280   2        }
 281   1        
 282   1        // Generating stop condition by driving SCL high
 283   1        delay_us(5);
 284   1        //P0DIR = 0xDF;
 285   1        HAL_W2_OVERRIDE_SDA_SCL(0, 1);
 286   1        
 287   1        // Drive SDA high
 288   1        delay_us(5);
 289   1        //P0DIR = 0xFF;
 290   1        HAL_W2_OVERRIDE_SDA_SCL(1, 1);
 291   1        
 292   1        // Work-around done. Return control to 2-wire.
 293   1        W2CON0 = 0x07;
 294   1        
 295   1        // Reset 2-wire and return to master mode at the frequency selected before calling this function
 296   1        W2CON0 = 0x03;
 297   1        W2CON0 = 0x03 | w2_freq;
 298   1      #endif
 299   1      }

C51 COMPILER V9.52.0.0   HAL_W2                                                            02/26/2016 11:44:41 PAGE 6   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    467    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
