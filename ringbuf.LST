C51 COMPILER V9.52.0.0   RINGBUF                                                           02/26/2016 11:44:41 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE RINGBUF
OBJECT MODULE PLACED IN ringbuf.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ringbuf.c BROWSE INCDIR(C:\Nordic Semiconductor\nRFgo SDK 2.3.0.10040\sourc
                    -e_code\compiler\c51;C:\Nordic Semiconductor\nRFgo SDK 2.3.0.10040\source_code\hal\nrf24le1;C:\Nordic Semiconductor\nRFgo
                    - SDK 2.3.0.10040\source_code\compiler\common) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*
   2           * Copyright (c) 2008, Swedish Institute of Computer Science.
   3           * All rights reserved.
   4           *
   5           * Redistribution and use in source and binary forms, with or without
   6           * modification, are permitted provided that the following conditions
   7           * are met:
   8           * 1. Redistributions of source code must retain the above copyright
   9           *    notice, this list of conditions and the following disclaimer.
  10           * 2. Redistributions in binary form must reproduce the above copyright
  11           *    notice, this list of conditions and the following disclaimer in the
  12           *    documentation and/or other materials provided with the distribution.
  13           * 3. Neither the name of the Institute nor the names of its contributors
  14           *    may be used to endorse or promote products derived from this software
  15           *    without specific prior written permission.
  16           *
  17           * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
  18           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  19           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20           * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
  21           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  22           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  23           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  24           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  25           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  26           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  27           * SUCH DAMAGE.
  28           *
  29           * This file is part of the Contiki operating system.
  30           *
  31           */
  32          
  33          /**
  34           * \file
  35           *         Ring buffer library implementation
  36           * \author
  37           *         Adam Dunkels <adam@sics.se>
  38           */
  39          
  40          #include "ringbuf.h"
  41          /*---------------------------------------------------------------------------*/
  42          void
  43          ringbuf_init(struct ringbuf *r, uint8_t *dataptr, uint8_t size)
  44          {
  45   1        r->datajack = dataptr;
  46   1        r->mask = size - 1;
  47   1        r->put_ptr = 0;
  48   1        r->get_ptr = 0;
  49   1      }
  50          /*---------------------------------------------------------------------------*/
  51          int
  52          ringbuf_put(struct ringbuf *r, uint8_t c)
  53          {
C51 COMPILER V9.52.0.0   RINGBUF                                                           02/26/2016 11:44:41 PAGE 2   

  54   1        /* Check if buffer is full. If it is full, return 0 to indicate that
  55   1           the element was not inserted into the buffer.
  56   1      
  57   1           XXX: there is a potential risk for a race condition here, because
  58   1           the ->get_ptr field may be written concurrently by the
  59   1           ringbuf_get() function. To avoid this, access to ->get_ptr must
  60   1           be atomic. We use an uint8_t type, which makes access atomic on
  61   1           most platforms, but C does not guarantee this.
  62   1        */
  63   1        if(((r->put_ptr - r->get_ptr) & r->mask) == r->mask) {
  64   2          return 0;
  65   2        }
  66   1        r->datajack[r->put_ptr] = c;
  67   1        r->put_ptr = (r->put_ptr + 1) & r->mask;
  68   1        return 1;
  69   1      }
  70          /*---------------------------------------------------------------------------*/
  71          int
  72          ringbuf_get(struct ringbuf *r)
  73          {
  74   1        uint8_t c;
  75   1        
  76   1        /* Check if there are bytes in the buffer. If so, we return the
  77   1           first one and increase the pointer. If there are no bytes left, we
  78   1           return -1.
  79   1      
  80   1           XXX: there is a potential risk for a race condition here, because
  81   1           the ->put_ptr field may be written concurrently by the
  82   1           ringbuf_put() function. To avoid this, access to ->get_ptr must
  83   1           be atomic. We use an uint8_t type, which makes access atomic on
  84   1           most platforms, but C does not guarantee this.
  85   1        */
  86   1        if(((r->put_ptr - r->get_ptr) & r->mask) > 0) {
  87   2          c = r->datajack[r->get_ptr];
  88   2          r->get_ptr = (r->get_ptr + 1) & r->mask;
  89   2          return c;
  90   2        } else {
  91   2          return -1;
  92   2        }
  93   1      }
  94          /*---------------------------------------------------------------------------*/
  95          int
  96          ringbuf_size(struct ringbuf *r)
  97          {
  98   1        return r->mask + 1;
  99   1      }
 100          /*---------------------------------------------------------------------------*/
 101          int
 102          ringbuf_elements(struct ringbuf *r)
 103          {
 104   1        return (r->put_ptr - r->get_ptr) & r->mask;
 105   1      }
 106          /*---------------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    265    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      13
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.52.0.0   RINGBUF                                                           02/26/2016 11:44:41 PAGE 3   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
